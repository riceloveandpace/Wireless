<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\stm32_bare_metal_api.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\stm32_bare_metal_api.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Fri Dec 08 15:47:30 2017
<BR><P>
<H3>Maximum Stack Usage =       4776 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; TMR_SR_executeTagOp &rArr; TMR_SR_writeTagMemWords &rArr; TMR_SR_writeTagMemBytes &rArr; TMR_SR_cmdBlockWrite &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">GPIOA_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">GPIOA_Handler</a><BR>
 <LI><a href="#[b]">GPIOB_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">GPIOB_Handler</a><BR>
 <LI><a href="#[c]">GPIOC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">GPIOC_Handler</a><BR>
 <LI><a href="#[d]">GPIOD_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">GPIOD_Handler</a><BR>
 <LI><a href="#[e]">GPIOE_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">GPIOE_Handler</a><BR>
 <LI><a href="#[f]">UART0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">UART0_Handler</a><BR>
 <LI><a href="#[11]">SSI0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">SSI0_Handler</a><BR>
 <LI><a href="#[12]">I2C0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">I2C0_Handler</a><BR>
 <LI><a href="#[13]">PMW0_FAULT_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">PMW0_FAULT_Handler</a><BR>
 <LI><a href="#[14]">PWM0_0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">PWM0_0_Handler</a><BR>
 <LI><a href="#[15]">PWM0_1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">PWM0_1_Handler</a><BR>
 <LI><a href="#[16]">PWM0_2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">PWM0_2_Handler</a><BR>
 <LI><a href="#[17]">QEI0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">QEI0_Handler</a><BR>
 <LI><a href="#[18]">ADC0SS0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">ADC0SS0_Handler</a><BR>
 <LI><a href="#[19]">ADC0SS1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">ADC0SS1_Handler</a><BR>
 <LI><a href="#[1a]">ADC0SS2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">ADC0SS2_Handler</a><BR>
 <LI><a href="#[1b]">ADC0SS3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">ADC0SS3_Handler</a><BR>
 <LI><a href="#[1c]">WDT0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">WDT0_Handler</a><BR>
 <LI><a href="#[1d]">TIMER0A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">TIMER0A_Handler</a><BR>
 <LI><a href="#[1e]">TIMER0B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">TIMER0B_Handler</a><BR>
 <LI><a href="#[1f]">TIMER1A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">TIMER1A_Handler</a><BR>
 <LI><a href="#[20]">TIMER1B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">TIMER1B_Handler</a><BR>
 <LI><a href="#[21]">TIMER2A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">TIMER2A_Handler</a><BR>
 <LI><a href="#[22]">TIMER2B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">TIMER2B_Handler</a><BR>
 <LI><a href="#[23]">COMP0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">COMP0_Handler</a><BR>
 <LI><a href="#[24]">COMP1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">COMP1_Handler</a><BR>
 <LI><a href="#[25]">COMP2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">COMP2_Handler</a><BR>
 <LI><a href="#[26]">SYSCTL_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">SYSCTL_Handler</a><BR>
 <LI><a href="#[27]">FLASH_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">FLASH_Handler</a><BR>
 <LI><a href="#[28]">GPIOF_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">GPIOF_Handler</a><BR>
 <LI><a href="#[29]">GPIOG_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">GPIOG_Handler</a><BR>
 <LI><a href="#[2a]">GPIOH_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">GPIOH_Handler</a><BR>
 <LI><a href="#[2b]">UART2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">UART2_Handler</a><BR>
 <LI><a href="#[2c]">SSI1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">SSI1_Handler</a><BR>
 <LI><a href="#[2d]">TIMER3A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">TIMER3A_Handler</a><BR>
 <LI><a href="#[2e]">TIMER3B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e]">TIMER3B_Handler</a><BR>
 <LI><a href="#[2f]">I2C1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">I2C1_Handler</a><BR>
 <LI><a href="#[30]">QEI1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30]">QEI1_Handler</a><BR>
 <LI><a href="#[31]">CAN0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31]">CAN0_Handler</a><BR>
 <LI><a href="#[32]">CAN1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32]">CAN1_Handler</a><BR>
 <LI><a href="#[33]">CAN2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33]">CAN2_Handler</a><BR>
 <LI><a href="#[34]">HIB_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34]">HIB_Handler</a><BR>
 <LI><a href="#[35]">USB0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">USB0_Handler</a><BR>
 <LI><a href="#[36]">PWM0_3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36]">PWM0_3_Handler</a><BR>
 <LI><a href="#[37]">UDMA_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37]">UDMA_Handler</a><BR>
 <LI><a href="#[38]">UDMAERR_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">UDMAERR_Handler</a><BR>
 <LI><a href="#[39]">ADC1SS0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39]">ADC1SS0_Handler</a><BR>
 <LI><a href="#[3a]">ADC1SS1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a]">ADC1SS1_Handler</a><BR>
 <LI><a href="#[3b]">ADC1SS2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b]">ADC1SS2_Handler</a><BR>
 <LI><a href="#[3c]">ADC1SS3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">ADC1SS3_Handler</a><BR>
 <LI><a href="#[3d]">GPIOJ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d]">GPIOJ_Handler</a><BR>
 <LI><a href="#[3e]">GPIOK_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3e]">GPIOK_Handler</a><BR>
 <LI><a href="#[3f]">GPIOL_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f]">GPIOL_Handler</a><BR>
 <LI><a href="#[40]">SSI2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40]">SSI2_Handler</a><BR>
 <LI><a href="#[41]">SSI3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41]">SSI3_Handler</a><BR>
 <LI><a href="#[42]">UART3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[42]">UART3_Handler</a><BR>
 <LI><a href="#[43]">UART4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[43]">UART4_Handler</a><BR>
 <LI><a href="#[44]">UART5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[44]">UART5_Handler</a><BR>
 <LI><a href="#[45]">UART6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45]">UART6_Handler</a><BR>
 <LI><a href="#[46]">UART7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[46]">UART7_Handler</a><BR>
 <LI><a href="#[47]">I2C2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[47]">I2C2_Handler</a><BR>
 <LI><a href="#[48]">I2C3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[48]">I2C3_Handler</a><BR>
 <LI><a href="#[49]">TIMER4A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[49]">TIMER4A_Handler</a><BR>
 <LI><a href="#[4a]">TIMER4B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a]">TIMER4B_Handler</a><BR>
 <LI><a href="#[4b]">TIMER5A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4b]">TIMER5A_Handler</a><BR>
 <LI><a href="#[4c]">TIMER5B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4c]">TIMER5B_Handler</a><BR>
 <LI><a href="#[4d]">WTIMER0A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4d]">WTIMER0A_Handler</a><BR>
 <LI><a href="#[4e]">WTIMER0B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4e]">WTIMER0B_Handler</a><BR>
 <LI><a href="#[4f]">WTIMER1A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4f]">WTIMER1A_Handler</a><BR>
 <LI><a href="#[50]">WTIMER1B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[50]">WTIMER1B_Handler</a><BR>
 <LI><a href="#[51]">WTIMER2A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">WTIMER2A_Handler</a><BR>
 <LI><a href="#[52]">WTIMER2B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[52]">WTIMER2B_Handler</a><BR>
 <LI><a href="#[53]">WTIMER3A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[53]">WTIMER3A_Handler</a><BR>
 <LI><a href="#[54]">WTIMER3B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[54]">WTIMER3B_Handler</a><BR>
 <LI><a href="#[55]">WTIMER4A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[55]">WTIMER4A_Handler</a><BR>
 <LI><a href="#[56]">WTIMER4B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[56]">WTIMER4B_Handler</a><BR>
 <LI><a href="#[57]">WTIMER5A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[57]">WTIMER5A_Handler</a><BR>
 <LI><a href="#[58]">WTIMER5B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[58]">WTIMER5B_Handler</a><BR>
 <LI><a href="#[59]">FPU_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[59]">FPU_Handler</a><BR>
 <LI><a href="#[5a]">I2C4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5a]">I2C4_Handler</a><BR>
 <LI><a href="#[5b]">I2C5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5b]">I2C5_Handler</a><BR>
 <LI><a href="#[5c]">GPIOM_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5c]">GPIOM_Handler</a><BR>
 <LI><a href="#[5d]">GPION_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5d]">GPION_Handler</a><BR>
 <LI><a href="#[5e]">QEI2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5e]">QEI2_Handler</a><BR>
 <LI><a href="#[5f]">GPIOP0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5f]">GPIOP0_Handler</a><BR>
 <LI><a href="#[60]">GPIOP1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[60]">GPIOP1_Handler</a><BR>
 <LI><a href="#[61]">GPIOP2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[61]">GPIOP2_Handler</a><BR>
 <LI><a href="#[62]">GPIOP3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[62]">GPIOP3_Handler</a><BR>
 <LI><a href="#[63]">GPIOP4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[63]">GPIOP4_Handler</a><BR>
 <LI><a href="#[64]">GPIOP5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[64]">GPIOP5_Handler</a><BR>
 <LI><a href="#[65]">GPIOP6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[65]">GPIOP6_Handler</a><BR>
 <LI><a href="#[66]">GPIOP7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[66]">GPIOP7_Handler</a><BR>
 <LI><a href="#[67]">GPIOQ0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[67]">GPIOQ0_Handler</a><BR>
 <LI><a href="#[68]">GPIOQ1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[68]">GPIOQ1_Handler</a><BR>
 <LI><a href="#[69]">GPIOQ2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[69]">GPIOQ2_Handler</a><BR>
 <LI><a href="#[6a]">GPIOQ3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6a]">GPIOQ3_Handler</a><BR>
 <LI><a href="#[6b]">GPIOQ4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6b]">GPIOQ4_Handler</a><BR>
 <LI><a href="#[6c]">GPIOQ5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6c]">GPIOQ5_Handler</a><BR>
 <LI><a href="#[6d]">GPIOQ6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6d]">GPIOQ6_Handler</a><BR>
 <LI><a href="#[6e]">GPIOQ7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6e]">GPIOQ7_Handler</a><BR>
 <LI><a href="#[6f]">GPIOR_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6f]">GPIOR_Handler</a><BR>
 <LI><a href="#[70]">GPIOS_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[70]">GPIOS_Handler</a><BR>
 <LI><a href="#[71]">PMW1_0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[71]">PMW1_0_Handler</a><BR>
 <LI><a href="#[72]">PWM1_1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[72]">PWM1_1_Handler</a><BR>
 <LI><a href="#[73]">PWM1_2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">PWM1_2_Handler</a><BR>
 <LI><a href="#[74]">PWM1_3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[74]">PWM1_3_Handler</a><BR>
 <LI><a href="#[75]">PWM1_FAULT_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[75]">PWM1_FAULT_Handler</a><BR>
 <LI><a href="#[109]">TMR_SR_read_internal</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[109]">TMR_SR_read_internal</a><BR>
 <LI><a href="#[105]">validateReadPlan</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[105]">validateReadPlan</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[18]">ADC0SS0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[19]">ADC0SS1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[1a]">ADC0SS2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[1b]">ADC0SS3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[39]">ADC1SS0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[3a]">ADC1SS1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[3b]">ADC1SS2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[3c]">ADC1SS3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[31]">CAN0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[32]">CAN1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[33]">CAN2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[23]">COMP0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[24]">COMP1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[25]">COMP2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[27]">FLASH_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[59]">FPU_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[a]">GPIOA_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[b]">GPIOB_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[c]">GPIOC_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[d]">GPIOD_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[e]">GPIOE_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[28]">GPIOF_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[29]">GPIOG_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[2a]">GPIOH_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[3d]">GPIOJ_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[3e]">GPIOK_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[3f]">GPIOL_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[5c]">GPIOM_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[5d]">GPION_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[5f]">GPIOP0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[60]">GPIOP1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[61]">GPIOP2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[62]">GPIOP3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[63]">GPIOP4_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[64]">GPIOP5_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[65]">GPIOP6_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[66]">GPIOP7_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[67]">GPIOQ0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[68]">GPIOQ1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[69]">GPIOQ2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[6a]">GPIOQ3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[6b]">GPIOQ4_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[6c]">GPIOQ5_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[6d]">GPIOQ6_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[6e]">GPIOQ7_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[6f]">GPIOR_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[70]">GPIOS_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[34]">HIB_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from read.o(i.HardFault_Handler) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[12]">I2C0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[2f]">I2C1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[47]">I2C2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[48]">I2C3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[5a]">I2C4_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[5b]">I2C5_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[13]">PMW0_FAULT_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[71]">PMW1_0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[14]">PWM0_0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[15]">PWM0_1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[16]">PWM0_2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[36]">PWM0_3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[72]">PWM1_1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[73]">PWM1_2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[74]">PWM1_3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[75]">PWM1_FAULT_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[17]">QEI0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[30]">QEI1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[5e]">QEI2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[11]">SSI0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[2c]">SSI1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[40]">SSI2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[41]">SSI3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[26]">SYSCTL_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from osdep_tm4c123gh5pm.o(i.SysTick_Handler) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[77]">SystemInit</a> from system_tm4c123.o(i.SystemInit) referenced from startup_tm4c123.o(.text)
 <LI><a href="#[1d]">TIMER0A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[1e]">TIMER0B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[1f]">TIMER1A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[20]">TIMER1B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[21]">TIMER2A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[22]">TIMER2B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[2d]">TIMER3A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[2e]">TIMER3B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[49]">TIMER4A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[4a]">TIMER4B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[4b]">TIMER5A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[4c]">TIMER5B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[82]">TMR_SR_SerialTransportNativeInit</a> from serial_transport_tm4c123gh6pm.o(i.TMR_SR_SerialTransportNativeInit) referenced from tm_reader.o(i.TMR_initSerialTransportTable)
 <LI><a href="#[79]">TMR_SR_cmdStopReading</a> from serial_reader_l3.o(i.TMR_SR_cmdStopReading) referenced from serial_reader.o(i.TMR_SR_SerialReader_init)
 <LI><a href="#[7b]">TMR_SR_paramGet</a> from serial_reader.o(i.TMR_SR_paramGet) referenced from serial_reader.o(i.TMR_SR_SerialReader_init)
 <LI><a href="#[7a]">TMR_SR_paramSet</a> from serial_reader.o(i.TMR_SR_paramSet) referenced from serial_reader.o(i.TMR_SR_SerialReader_init)
 <LI><a href="#[f]">UART0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[10]">UART1_Handler</a> from serial_transport_tm4c123gh6pm.o(i.UART1_Handler) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[2b]">UART2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[42]">UART3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[43]">UART4_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[44]">UART5_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[45]">UART6_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[46]">UART7_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[38]">UDMAERR_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[37]">UDMA_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[35]">USB0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[1c]">WDT0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[4d]">WTIMER0A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[4e]">WTIMER0B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[4f]">WTIMER1A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[50]">WTIMER1B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[51]">WTIMER2A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[52]">WTIMER2B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[53]">WTIMER3A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[54]">WTIMER3B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[55]">WTIMER4A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[56]">WTIMER4B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[57]">WTIMER5A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[58]">WTIMER5B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[78]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_tm4c123.o(.text)
 <LI><a href="#[83]">_sputc</a> from printf1.o(i._sputc) referenced from printf1.o(i.__0sprintf$1)
 <LI><a href="#[76]">main</a> from read.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[81]">s_flush</a> from serial_transport_tm4c123gh6pm.o(i.s_flush) referenced from serial_transport_tm4c123gh6pm.o(i.TMR_SR_SerialTransportNativeInit)
 <LI><a href="#[7c]">s_open</a> from serial_transport_tm4c123gh6pm.o(i.s_open) referenced from serial_transport_tm4c123gh6pm.o(i.TMR_SR_SerialTransportNativeInit)
 <LI><a href="#[7e]">s_receiveBytes</a> from serial_transport_tm4c123gh6pm.o(i.s_receiveBytes) referenced from serial_transport_tm4c123gh6pm.o(i.TMR_SR_SerialTransportNativeInit)
 <LI><a href="#[7d]">s_sendBytes</a> from serial_transport_tm4c123gh6pm.o(i.s_sendBytes) referenced from serial_transport_tm4c123gh6pm.o(i.TMR_SR_SerialTransportNativeInit)
 <LI><a href="#[7f]">s_setBaudRate</a> from serial_transport_tm4c123gh6pm.o(i.s_setBaudRate) referenced from serial_transport_tm4c123gh6pm.o(i.TMR_SR_SerialTransportNativeInit)
 <LI><a href="#[80]">s_shutdown</a> from serial_transport_tm4c123gh6pm.o(i.s_shutdown) referenced from serial_transport_tm4c123gh6pm.o(i.TMR_SR_SerialTransportNativeInit)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[78]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(.text)
</UL>
<P><STRONG><a name="[128]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[84]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[89]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[129]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[12a]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[12b]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[12c]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[12d]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>GPIOA_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>GPIOB_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>GPIOC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>GPIOD_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>GPIOE_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOE_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOE_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UART0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SSI0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>I2C0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PMW0_FAULT_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMW0_FAULT_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMW0_FAULT_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PWM0_0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PWM0_1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PWM0_2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>QEI0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>ADC0SS0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>ADC0SS1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>ADC0SS2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ADC0SS3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>WDT0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIMER0A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIMER0B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIMER1A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIMER1B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIMER2A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIMER2B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>COMP0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>COMP1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>COMP2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SYSCTL_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTL_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTL_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>FLASH_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>GPIOF_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOF_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOF_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>GPIOG_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOG_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOG_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>GPIOH_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOH_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOH_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>UART2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SSI1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIMER3A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIMER3B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>QEI1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CAN1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>HIB_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIB_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIB_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USB0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>PWM0_3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>UDMA_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDMA_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDMA_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>UDMAERR_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDMAERR_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDMAERR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC1SS0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>ADC1SS1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>ADC1SS2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>ADC1SS3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>GPIOJ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOJ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOJ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>GPIOK_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOK_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOK_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>GPIOL_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOL_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOL_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SSI2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SSI3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>UART4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>UART5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>UART6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>UART7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>I2C2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>I2C3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIMER4A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIMER4B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIMER5A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIMER5B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>WTIMER0A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER0A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER0A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>WTIMER0B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER0B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER0B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>WTIMER1A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER1A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER1A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>WTIMER1B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER1B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER1B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>WTIMER2A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER2A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER2A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>WTIMER2B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER2B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER2B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>WTIMER3A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER3A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER3A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>WTIMER3B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER3B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER3B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>WTIMER4A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER4A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER4A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>WTIMER4B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER4B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER4B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>WTIMER5A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER5A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER5A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>WTIMER5B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER5B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER5B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>FPU_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPU_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPU_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>I2C4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>I2C5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>GPIOM_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>GPION_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPION_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPION_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>QEI2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>GPIOP0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>GPIOP1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>GPIOP2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>GPIOP3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>GPIOP4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>GPIOP5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>GPIOP6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>GPIOP7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>GPIOQ0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>GPIOQ1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>GPIOQ2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>GPIOQ3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>GPIOQ4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>GPIOQ5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>GPIOQ6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>GPIOQ7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>GPIOR_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOR_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>GPIOS_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOS_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOS_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>PMW1_0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMW1_0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMW1_0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>PWM1_1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>PWM1_2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>PWM1_3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>PWM1_FAULT_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_FAULT_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_FAULT_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[12e]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramGet
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_SerialReader_init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[10e]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_receiveMessage
</UL>

<P><STRONG><a name="[130]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[132]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_TRD_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_receiveMessage
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramProbe
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetGPIO
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_initSerialTransportTable
</UL>

<P><STRONG><a name="[134]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[11b]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_create
</UL>

<P><STRONG><a name="[100]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_receiveMessage
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_create
</UL>

<P><STRONG><a name="[11a]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_create
</UL>

<P><STRONG><a name="[116]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_create
</UL>

<P><STRONG><a name="[117]"></a>strtok</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_create
</UL>

<P><STRONG><a name="[135]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[85]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[136]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, read.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>SendChar</STRONG> (Thumb, 88 bytes, Stack size 4 bytes, serial_transport_tm4c123gh6pm.o(i.SendChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SendChar &rArr; UART1_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_sendBytes
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, osdep_tm4c123gh5pm.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>SystemInit</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, system_tm4c123.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(.text)
</UL>
<P><STRONG><a name="[11c]"></a>TMR_RP_init_simple</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, tm_reader.o(i.TMR_RP_init_simple))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TMR_RP_init_simple
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_reader_init_internal
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>TMR_SR_SerialReader_init</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, serial_reader.o(i.TMR_SR_SerialReader_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TMR_SR_SerialReader_init &rArr; TMR_reader_init_internal &rArr; TMR_RP_init_simple
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_reader_init_internal
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramSet
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_create
</UL>

<P><STRONG><a name="[82]"></a>TMR_SR_SerialTransportNativeInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, serial_transport_tm4c123gh6pm.o(i.TMR_SR_SerialTransportNativeInit))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tm_reader.o(i.TMR_initSerialTransportTable)
</UL>
<P><STRONG><a name="[8f]"></a>TMR_SR_addTagOp</STRONG> (Thumb, 740 bytes, Stack size 72 bytes, serial_reader.o(i.TMR_SR_addTagOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = TMR_SR_addTagOp &rArr; prepEmbReadTagMultiple &rArr; TMR_SR_msgSetupReadTagMultiple &rArr; TMR_SR_msgSetupReadTagMultipleWithMetadata &rArr; filterbytes
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2WriteTagEPC
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2LockTag
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2KillTag
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2DataWrite
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2DataRead
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2BlockWrite
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2BlockPermaLock
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2BlockErase
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepEmbReadTagMultiple
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupMultipleProtocolSearch
</UL>

<P><STRONG><a name="[a6]"></a>TMR_SR_cmdAntennaDetect</STRONG> (Thumb, 94 bytes, Stack size 272 bytes, serial_reader_l3.o(i.TMR_SR_cmdAntennaDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = TMR_SR_cmdAntennaDetect &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTxRxMapFromPorts
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoDetectAntennaList
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[a8]"></a>TMR_SR_cmdAuthReqResponse</STRONG> (Thumb, 98 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdAuthReqResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = TMR_SR_cmdAuthReqResponse &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_hasMoreTags
</UL>

<P><STRONG><a name="[aa]"></a>TMR_SR_cmdBlockErase</STRONG> (Thumb, 62 bytes, Stack size 296 bytes, serial_reader_l3.o(i.TMR_SR_cmdBlockErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = TMR_SR_cmdBlockErase &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2BlockErase
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_executeTagOp
</UL>

<P><STRONG><a name="[ac]"></a>TMR_SR_cmdBlockPermaLock</STRONG> (Thumb, 284 bytes, Stack size 328 bytes, serial_reader_l3.o(i.TMR_SR_cmdBlockPermaLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = TMR_SR_cmdBlockPermaLock &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterbytes
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_executeTagOp
</UL>

<P><STRONG><a name="[af]"></a>TMR_SR_cmdBlockWrite</STRONG> (Thumb, 238 bytes, Stack size 312 bytes, serial_reader_l3.o(i.TMR_SR_cmdBlockWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = TMR_SR_cmdBlockWrite &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterbytes
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_writeTagMemBytes
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_executeTagOp
</UL>

<P><STRONG><a name="[9b]"></a>TMR_SR_cmdBootFirmware</STRONG> (Thumb, 154 bytes, Stack size 272 bytes, serial_reader_l3.o(i.TMR_SR_cmdBootFirmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = TMR_SR_cmdBootFirmware &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_boot
</UL>

<P><STRONG><a name="[b0]"></a>TMR_SR_cmdClearTagBuffer</STRONG> (Thumb, 30 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdClearTagBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TMR_SR_cmdClearTagBuffer &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read
</UL>

<P><STRONG><a name="[b1]"></a>TMR_SR_cmdGEN2LockTag</STRONG> (Thumb, 84 bytes, Stack size 288 bytes, serial_reader_l3.o(i.TMR_SR_cmdGEN2LockTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = TMR_SR_cmdGEN2LockTag &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2LockTag
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterbytes
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_executeTagOp
</UL>

<P><STRONG><a name="[b2]"></a>TMR_SR_cmdGEN2ReadAfterWriteTagData</STRONG> (Thumb, 240 bytes, Stack size 328 bytes, serial_reader_l3.o(i.TMR_SR_cmdGEN2ReadAfterWriteTagData))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = TMR_SR_cmdGEN2ReadAfterWriteTagData &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2DataWrite
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterbytes
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_readAfterWriteTagMemWords
</UL>

<P><STRONG><a name="[b3]"></a>TMR_SR_cmdGEN2ReadTagData</STRONG> (Thumb, 254 bytes, Stack size 320 bytes, serial_reader_l3.o(i.TMR_SR_cmdGEN2ReadTagData))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = TMR_SR_cmdGEN2ReadTagData &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_gettime_consistent
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_postprocessReaderSpecificMetadata
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_parseMetadataOnly
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2DataRead
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterbytes
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_executeTagOp
</UL>

<P><STRONG><a name="[b7]"></a>TMR_SR_cmdGEN2WriteTagData</STRONG> (Thumb, 128 bytes, Stack size 304 bytes, serial_reader_l3.o(i.TMR_SR_cmdGEN2WriteTagData))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = TMR_SR_cmdGEN2WriteTagData &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2DataWrite
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterbytes
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_writeTagMemBytes
</UL>

<P><STRONG><a name="[b8]"></a>TMR_SR_cmdGetAntennaPortPowersAndSettlingTime</STRONG> (Thumb, 102 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetAntennaPortPowersAndSettlingTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = TMR_SR_cmdGetAntennaPortPowersAndSettlingTime &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPortValues
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPortValues
</UL>

<P><STRONG><a name="[b9]"></a>TMR_SR_cmdGetAntennaReturnLoss</STRONG> (Thumb, 108 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetAntennaReturnLoss))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = TMR_SR_cmdGetAntennaReturnLoss &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[a3]"></a>TMR_SR_cmdGetAvailableProtocols</STRONG> (Thumb, 128 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetAvailableProtocols))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = TMR_SR_cmdGetAvailableProtocols &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_boot
</UL>

<P><STRONG><a name="[ba]"></a>TMR_SR_cmdGetAvailableRegions</STRONG> (Thumb, 78 bytes, Stack size 272 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetAvailableRegions))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = TMR_SR_cmdGetAvailableRegions &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[9a]"></a>TMR_SR_cmdGetCurrentProgram</STRONG> (Thumb, 34 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetCurrentProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TMR_SR_cmdGetCurrentProgram &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_boot
</UL>

<P><STRONG><a name="[a2]"></a>TMR_SR_cmdGetCurrentProtocol</STRONG> (Thumb, 42 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetCurrentProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TMR_SR_cmdGetCurrentProtocol &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserProfile
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_boot
</UL>

<P><STRONG><a name="[bb]"></a>TMR_SR_cmdGetFrequencyHopTable</STRONG> (Thumb, 88 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetFrequencyHopTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = TMR_SR_cmdGetFrequencyHopTable &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[bc]"></a>TMR_SR_cmdGetFrequencyHopTime</STRONG> (Thumb, 56 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetFrequencyHopTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TMR_SR_cmdGetFrequencyHopTime &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[bd]"></a>TMR_SR_cmdGetGPIO</STRONG> (Thumb, 146 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = TMR_SR_cmdGetGPIO &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[bf]"></a>TMR_SR_cmdGetGPIODirection</STRONG> (Thumb, 50 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetGPIODirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TMR_SR_cmdGetGPIODirection &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[c0]"></a>TMR_SR_cmdGetHardwareVersion</STRONG> (Thumb, 78 bytes, Stack size 272 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetHardwareVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = TMR_SR_cmdGetHardwareVersion &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSerialNumber
</UL>

<P><STRONG><a name="[c1]"></a>TMR_SR_cmdGetMinimumFrequency</STRONG> (Thumb, 58 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetMinimumFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TMR_SR_cmdGetMinimumFrequency &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[c2]"></a>TMR_SR_cmdGetPowerMode</STRONG> (Thumb, 40 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetPowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TMR_SR_cmdGetPowerMode &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[c3]"></a>TMR_SR_cmdGetProtocolConfiguration</STRONG> (Thumb, 250 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetProtocolConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = TMR_SR_cmdGetProtocolConfiguration &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[c4]"></a>TMR_SR_cmdGetQuantizationStep</STRONG> (Thumb, 58 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetQuantizationStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TMR_SR_cmdGetQuantizationStep &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[c5]"></a>TMR_SR_cmdGetReadTxPower</STRONG> (Thumb, 48 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetReadTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TMR_SR_cmdGetReadTxPower &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[c6]"></a>TMR_SR_cmdGetReadTxPowerWithLimits</STRONG> (Thumb, 62 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetReadTxPowerWithLimits))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TMR_SR_cmdGetReadTxPowerWithLimits &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[9d]"></a>TMR_SR_cmdGetReaderConfiguration</STRONG> (Thumb, 174 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetReaderConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = TMR_SR_cmdGetReaderConfiguration &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_boot
</UL>

<P><STRONG><a name="[c7]"></a>TMR_SR_cmdGetReaderStatistics</STRONG> (Thumb, 260 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetReaderStatistics))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = TMR_SR_cmdGetReaderStatistics &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[c8]"></a>TMR_SR_cmdGetReaderStats</STRONG> (Thumb, 322 bytes, Stack size 296 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetReaderStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = TMR_SR_cmdGetReaderStats &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_fillReaderStats
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[ca]"></a>TMR_SR_cmdGetReaderWriteTimeOut</STRONG> (Thumb, 62 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetReaderWriteTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TMR_SR_cmdGetReaderWriteTimeOut &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[cb]"></a>TMR_SR_cmdGetRegion</STRONG> (Thumb, 40 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TMR_SR_cmdGetRegion &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserProfile
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[cc]"></a>TMR_SR_cmdGetRegionConfiguration</STRONG> (Thumb, 66 bytes, Stack size 272 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetRegionConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = TMR_SR_cmdGetRegionConfiguration &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[cd]"></a>TMR_SR_cmdGetTagsRemaining</STRONG> (Thumb, 50 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetTagsRemaining))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TMR_SR_cmdGetTagsRemaining &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdMultipleProtocolSearch
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
</UL>

<P><STRONG><a name="[ce]"></a>TMR_SR_cmdGetTemperature</STRONG> (Thumb, 40 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TMR_SR_cmdGetTemperature &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[cf]"></a>TMR_SR_cmdGetUserMode</STRONG> (Thumb, 40 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetUserMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TMR_SR_cmdGetUserMode &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[d0]"></a>TMR_SR_cmdGetWriteTxPower</STRONG> (Thumb, 48 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetWriteTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TMR_SR_cmdGetWriteTxPower &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[d1]"></a>TMR_SR_cmdKillTag</STRONG> (Thumb, 78 bytes, Stack size 288 bytes, serial_reader_l3.o(i.TMR_SR_cmdKillTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = TMR_SR_cmdKillTag &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2KillTag
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterbytes
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_executeTagOp
</UL>

<P><STRONG><a name="[d2]"></a>TMR_SR_cmdMultipleProtocolSearch</STRONG> (Thumb, 224 bytes, Stack size 304 bytes, serial_reader_l3.o(i.TMR_SR_cmdMultipleProtocolSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = TMR_SR_cmdMultipleProtocolSearch &rArr; TMR_SR_cmdGetTagsRemaining &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetTagsRemaining
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendMessage
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupMultipleProtocolSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
</UL>

<P><STRONG><a name="[d4]"></a>TMR_SR_cmdProbeBaudRate</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, serial_reader.o(i.TMR_SR_cmdProbeBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = TMR_SR_cmdProbeBaudRate &rArr; verifySearchStatus &rArr; TMR_SR_cmdSetReaderConfiguration &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdVersion
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifySearchStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserProfile
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_connect
</UL>

<P><STRONG><a name="[d7]"></a>TMR_SR_cmdReadAfterWriteGen2TagEpc</STRONG> (Thumb, 246 bytes, Stack size 328 bytes, serial_reader_l3.o(i.TMR_SR_cmdReadAfterWriteGen2TagEpc))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = TMR_SR_cmdReadAfterWriteGen2TagEpc &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterbytes
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_executeTagOp
</UL>

<P><STRONG><a name="[d8]"></a>TMR_SR_cmdReadTagMultiple</STRONG> (Thumb, 172 bytes, Stack size 296 bytes, serial_reader_l3.o(i.TMR_SR_cmdReadTagMultiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = TMR_SR_cmdReadTagMultiple &rArr; TMR_SR_msgSetupReadTagMultiple &rArr; TMR_SR_msgSetupReadTagMultipleWithMetadata &rArr; filterbytes
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupReadTagMultiple
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
</UL>

<P><STRONG><a name="[da]"></a>TMR_SR_cmdResetReaderStatistics</STRONG> (Thumb, 40 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdResetReaderStatistics))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TMR_SR_cmdResetReaderStatistics &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[db]"></a>TMR_SR_cmdResetReaderStats</STRONG> (Thumb, 80 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdResetReaderStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TMR_SR_cmdResetReaderStats &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[dc]"></a>TMR_SR_cmdSetAntennaPortPowersAndSettlingTime</STRONG> (Thumb, 122 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetAntennaPortPowersAndSettlingTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = TMR_SR_cmdSetAntennaPortPowersAndSettlingTime &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPortValues
</UL>

<P><STRONG><a name="[dd]"></a>TMR_SR_cmdSetAntennaSearchList</STRONG> (Thumb, 74 bytes, Stack size 272 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetAntennaSearchList))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = TMR_SR_cmdSetAntennaSearchList &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAntennaList
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoDetectAntennaList
</UL>

<P><STRONG><a name="[9f]"></a>TMR_SR_cmdSetBaudRate</STRONG> (Thumb, 52 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TMR_SR_cmdSetBaudRate &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_boot
</UL>

<P><STRONG><a name="[de]"></a>TMR_SR_cmdSetFrequencyHopTable</STRONG> (Thumb, 88 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetFrequencyHopTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = TMR_SR_cmdSetFrequencyHopTable &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[df]"></a>TMR_SR_cmdSetFrequencyHopTime</STRONG> (Thumb, 58 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetFrequencyHopTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TMR_SR_cmdSetFrequencyHopTime &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[e0]"></a>TMR_SR_cmdSetGPIODirection</STRONG> (Thumb, 46 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetGPIODirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TMR_SR_cmdSetGPIODirection &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[e1]"></a>TMR_SR_cmdSetMinimumFrequency</STRONG> (Thumb, 58 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetMinimumFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TMR_SR_cmdSetMinimumFrequency &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[e2]"></a>TMR_SR_cmdSetPowerMode</STRONG> (Thumb, 34 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetPowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TMR_SR_cmdSetPowerMode &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[a5]"></a>TMR_SR_cmdSetProtocol</STRONG> (Thumb, 40 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TMR_SR_cmdSetProtocol &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProtocol
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_boot
</UL>

<P><STRONG><a name="[e3]"></a>TMR_SR_cmdSetProtocolConfiguration</STRONG> (Thumb, 326 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetProtocolConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = TMR_SR_cmdSetProtocolConfiguration &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[e4]"></a>TMR_SR_cmdSetProtocolLicenseKey</STRONG> (Thumb, 114 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetProtocolLicenseKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = TMR_SR_cmdSetProtocolLicenseKey &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[e5]"></a>TMR_SR_cmdSetQuantizationStep</STRONG> (Thumb, 58 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetQuantizationStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TMR_SR_cmdSetQuantizationStep &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[e6]"></a>TMR_SR_cmdSetReadTxPower</STRONG> (Thumb, 54 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetReadTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TMR_SR_cmdSetReadTxPower &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[9e]"></a>TMR_SR_cmdSetReaderConfiguration</STRONG> (Thumb, 172 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetReaderConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TMR_SR_cmdSetReaderConfiguration &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserProfile
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifySearchStatus
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_destroy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProtocol
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_boot
</UL>

<P><STRONG><a name="[e7]"></a>TMR_SR_cmdSetReaderWriteTimeOut</STRONG> (Thumb, 58 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetReaderWriteTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TMR_SR_cmdSetReaderWriteTimeOut &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[a1]"></a>TMR_SR_cmdSetRegion</STRONG> (Thumb, 34 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TMR_SR_cmdSetRegion &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_boot
</UL>

<P><STRONG><a name="[e8]"></a>TMR_SR_cmdSetRegionLbt</STRONG> (Thumb, 38 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetRegionLbt))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TMR_SR_cmdSetRegionLbt &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[e9]"></a>TMR_SR_cmdSetTxRxPorts</STRONG> (Thumb, 38 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetTxRxPorts))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TMR_SR_cmdSetTxRxPorts &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[ea]"></a>TMR_SR_cmdSetUserMode</STRONG> (Thumb, 34 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetUserMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TMR_SR_cmdSetUserMode &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[eb]"></a>TMR_SR_cmdSetUserProfile</STRONG> (Thumb, 528 bytes, Stack size 608 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetUserProfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = TMR_SR_cmdSetUserProfile &rArr; prepForSearch &rArr; autoDetectAntennaList &rArr; TMR_SR_cmdSetAntennaSearchList &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetReaderConfiguration
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetRegion
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetCurrentProtocol
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepForSearch
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compareAntennas
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdProbeBaudRate
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupMultipleProtocolSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[ee]"></a>TMR_SR_cmdSetWriteTxPower</STRONG> (Thumb, 54 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetWriteTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TMR_SR_cmdSetWriteTxPower &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[79]"></a>TMR_SR_cmdStopReading</STRONG> (Thumb, 56 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdStopReading))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = TMR_SR_cmdStopReading &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifySearchStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_reader.o(i.TMR_SR_SerialReader_init)
</UL>
<P><STRONG><a name="[d5]"></a>TMR_SR_cmdVersion</STRONG> (Thumb, 170 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = TMR_SR_cmdVersion &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdProbeBaudRate
</UL>

<P><STRONG><a name="[ef]"></a>TMR_SR_cmdWriteGen2TagEpc</STRONG> (Thumb, 146 bytes, Stack size 304 bytes, serial_reader_l3.o(i.TMR_SR_cmdWriteGen2TagEpc))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = TMR_SR_cmdWriteGen2TagEpc &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterbytes
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_executeTagOp
</UL>

<P><STRONG><a name="[f0]"></a>TMR_SR_connect</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, serial_reader.o(i.TMR_SR_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = TMR_SR_connect &rArr; TMR_SR_boot &rArr; initTxRxMapFromPorts &rArr; TMR_SR_cmdAntennaDetect &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifySearchStatus
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdProbeBaudRate
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_boot
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f1]"></a>TMR_SR_destroy</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, serial_reader.o(i.TMR_SR_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = TMR_SR_destroy &rArr; TMR_SR_cmdSetReaderConfiguration &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetReaderConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>TMR_SR_executeEmbeddedRead</STRONG> (Thumb, 210 bytes, Stack size 288 bytes, serial_reader_l3.o(i.TMR_SR_executeEmbeddedRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = TMR_SR_executeEmbeddedRead &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
</UL>

<P><STRONG><a name="[f3]"></a>TMR_SR_executeTagOp</STRONG> (Thumb, 724 bytes, Stack size 912 bytes, serial_reader.o(i.TMR_SR_executeTagOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952<LI>Call Chain = TMR_SR_executeTagOp &rArr; TMR_SR_writeTagMemWords &rArr; TMR_SR_writeTagMemBytes &rArr; TMR_SR_cmdBlockWrite &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdWriteGen2TagEpc
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdReadAfterWriteGen2TagEpc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdKillTag
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGEN2ReadTagData
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGEN2LockTag
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdBlockWrite
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdBlockPermaLock
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdBlockErase
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_writeTagMemWords
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProtocol
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_readAfterWriteTagMemWords
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>TMR_SR_getNextTag</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, serial_reader.o(i.TMR_SR_getNextTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = TMR_SR_getNextTag &rArr; TMR_SR_hasMoreTags &rArr; TMR_SR_cmdAuthReqResponse &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_receiveMessage
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_postprocessReaderSpecificMetadata
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_parseMetadataOnly
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_parseMetadataFromMessage
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_hasMoreTags
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f8]"></a>TMR_SR_hasMoreTags</STRONG> (Thumb, 446 bytes, Stack size 920 bytes, serial_reader.o(i.TMR_SR_hasMoreTags))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = TMR_SR_hasMoreTags &rArr; TMR_SR_cmdAuthReqResponse &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramSet
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_TRD_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_receiveMessage
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_postprocessReaderSpecificMetadata
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_parseMetadataFromMessage
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdAuthReqResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_getNextTag
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>TMR_SR_msgAddGEN2BlockErase</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, serial_reader_l3.o(i.TMR_SR_msgAddGEN2BlockErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TMR_SR_msgAddGEN2BlockErase &rArr; filterbytes
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterbytes
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdBlockErase
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[97]"></a>TMR_SR_msgAddGEN2BlockPermaLock</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, serial_reader_l3.o(i.TMR_SR_msgAddGEN2BlockPermaLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TMR_SR_msgAddGEN2BlockPermaLock &rArr; filterbytes
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterbytes
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[96]"></a>TMR_SR_msgAddGEN2BlockWrite</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, serial_reader_l3.o(i.TMR_SR_msgAddGEN2BlockWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TMR_SR_msgAddGEN2BlockWrite &rArr; filterbytes
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterbytes
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[92]"></a>TMR_SR_msgAddGEN2DataRead</STRONG> (Thumb, 140 bytes, Stack size 28 bytes, serial_reader_l3.o(i.TMR_SR_msgAddGEN2DataRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TMR_SR_msgAddGEN2DataRead
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGEN2ReadTagData
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[93]"></a>TMR_SR_msgAddGEN2DataWrite</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, serial_reader_l3.o(i.TMR_SR_msgAddGEN2DataWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TMR_SR_msgAddGEN2DataWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGEN2WriteTagData
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGEN2ReadAfterWriteTagData
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[95]"></a>TMR_SR_msgAddGEN2KillTag</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, serial_reader_l3.o(i.TMR_SR_msgAddGEN2KillTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR_SR_msgAddGEN2KillTag
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdKillTag
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[94]"></a>TMR_SR_msgAddGEN2LockTag</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, serial_reader_l3.o(i.TMR_SR_msgAddGEN2LockTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TMR_SR_msgAddGEN2LockTag
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGEN2LockTag
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[91]"></a>TMR_SR_msgAddGEN2WriteTagEPC</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, serial_reader_l3.o(i.TMR_SR_msgAddGEN2WriteTagEPC))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TMR_SR_msgAddGEN2WriteTagEPC &rArr; tm_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[d3]"></a>TMR_SR_msgSetupMultipleProtocolSearch</STRONG> (Thumb, 630 bytes, Stack size 80 bytes, serial_reader_l3.o(i.TMR_SR_msgSetupMultipleProtocolSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = TMR_SR_msgSetupMultipleProtocolSearch &rArr; TMR_SR_addTagOp &rArr; prepEmbReadTagMultiple &rArr; TMR_SR_msgSetupReadTagMultiple &rArr; TMR_SR_msgSetupReadTagMultipleWithMetadata &rArr; filterbytes
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupReadTagSingle
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupReadTagMultipleWithMetadata
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserProfile
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdMultipleProtocolSearch
</UL>

<P><STRONG><a name="[d9]"></a>TMR_SR_msgSetupReadTagMultiple</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, serial_reader_l3.o(i.TMR_SR_msgSetupReadTagMultiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TMR_SR_msgSetupReadTagMultiple &rArr; TMR_SR_msgSetupReadTagMultipleWithMetadata &rArr; filterbytes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupReadTagMultipleWithMetadata
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdReadTagMultiple
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepEmbReadTagMultiple
</UL>

<P><STRONG><a name="[fd]"></a>TMR_SR_msgSetupReadTagMultipleWithMetadata</STRONG> (Thumb, 484 bytes, Stack size 48 bytes, serial_reader_l3.o(i.TMR_SR_msgSetupReadTagMultipleWithMetadata))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TMR_SR_msgSetupReadTagMultipleWithMetadata &rArr; filterbytes
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramGet
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterbytes
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupReadTagMultiple
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupMultipleProtocolSearch
</UL>

<P><STRONG><a name="[fc]"></a>TMR_SR_msgSetupReadTagSingle</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, serial_reader_l3.o(i.TMR_SR_msgSetupReadTagSingle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TMR_SR_msgSetupReadTagSingle &rArr; filterbytes
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterbytes
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupMultipleProtocolSearch
</UL>

<P><STRONG><a name="[fa]"></a>TMR_SR_parseMetadataFromMessage</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, serial_reader_l3.o(i.TMR_SR_parseMetadataFromMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TMR_SR_parseMetadataFromMessage &rArr; TMR_SR_parseMetadataOnly &rArr; extractGen2MemoryBankValues &rArr; tm_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_parseMetadataOnly
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_u8s_per_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_hasMoreTags
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_getNextTag
</UL>

<P><STRONG><a name="[b5]"></a>TMR_SR_parseMetadataOnly</STRONG> (Thumb, 478 bytes, Stack size 32 bytes, serial_reader_l3.o(i.TMR_SR_parseMetadataOnly))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TMR_SR_parseMetadataOnly &rArr; extractGen2MemoryBankValues &rArr; tm_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_u8s_per_bits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractGen2MemoryBankValues
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_parseMetadataFromMessage
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGEN2ReadTagData
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_getNextTag
</UL>

<P><STRONG><a name="[b6]"></a>TMR_SR_postprocessReaderSpecificMetadata</STRONG> (Thumb, 190 bytes, Stack size 20 bytes, serial_reader_l3.o(i.TMR_SR_postprocessReaderSpecificMetadata))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TMR_SR_postprocessReaderSpecificMetadata
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGEN2ReadTagData
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_hasMoreTags
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_getNextTag
</UL>

<P><STRONG><a name="[108]"></a>TMR_SR_read</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, serial_reader.o(i.TMR_SR_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = TMR_SR_read &rArr; TMR_SR_read_internal &rArr;  TMR_SR_read_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdResetReaderStats
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdClearTagBuffer
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>TMR_SR_receiveMessage</STRONG> (Thumb, 406 bytes, Stack size 64 bytes, serial_reader_l3.o(i.TMR_SR_receiveMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TMR_SR_receiveMessage &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR__notifyTransportListeners
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_crc
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifySearchStatus
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_hasMoreTags
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_getNextTag
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>

<P><STRONG><a name="[a7]"></a>TMR_SR_send</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, serial_reader_l3.o(i.TMR_SR_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserProfile
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetProtocolLicenseKey
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetGPIODirection
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetWriteTxPower
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetUserMode
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetTemperature
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetTagsRemaining
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetRegionConfiguration
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetRegion
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderWriteTimeOut
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderConfiguration
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReadTxPowerWithLimits
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReadTxPower
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetQuantizationStep
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetProtocolConfiguration
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetPowerMode
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetMinimumFrequency
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetHardwareVersion
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetGPIODirection
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetFrequencyHopTime
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetFrequencyHopTable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetCurrentProtocol
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetCurrentProgram
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetAvailableRegions
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetAvailableProtocols
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetAntennaReturnLoss
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetAntennaPortPowersAndSettlingTime
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdBlockPermaLock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdAntennaDetect
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_getNextTag
</UL>

<P><STRONG><a name="[111]"></a>TMR_SR_sendBytes</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, serial_reader_l3.o(i.TMR_SR_sendBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR__notifyTransportListeners
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendMessage
</UL>

<P><STRONG><a name="[a9]"></a>TMR_SR_sendMessage</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, serial_reader_l3.o(i.TMR_SR_sendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isContinuousReadParamSupported
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendBytes
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_executeEmbeddedRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdStopReading
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdReadTagMultiple
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdMultipleProtocolSearch
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdAuthReqResponse
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>

<P><STRONG><a name="[ab]"></a>TMR_SR_sendTimeout</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, serial_reader_l3.o(i.TMR_SR_sendTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_receiveMessage
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isContinuousReadParamSupported
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_executeEmbeddedRead
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdWriteGen2TagEpc
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdVersion
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetWriteTxPower
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserMode
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetTxRxPorts
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetRegionLbt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetRegion
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetReaderWriteTimeOut
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetReaderConfiguration
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetReadTxPower
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetQuantizationStep
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetProtocolConfiguration
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetProtocol
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetPowerMode
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetMinimumFrequency
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetFrequencyHopTime
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetFrequencyHopTable
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetBaudRate
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetAntennaSearchList
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetAntennaPortPowersAndSettlingTime
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdResetReaderStats
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdResetReaderStatistics
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdReadTagMultiple
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdReadAfterWriteGen2TagEpc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdMultipleProtocolSearch
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdKillTag
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderStats
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderStatistics
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetGPIO
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGEN2WriteTagData
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGEN2ReadTagData
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGEN2ReadAfterWriteTagData
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGEN2LockTag
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdClearTagBuffer
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdBootFirmware
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdBlockWrite
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdBlockErase
</UL>

<P><STRONG><a name="[113]"></a>TMR_SR_writeTagMemBytes</STRONG> (Thumb, 220 bytes, Stack size 312 bytes, serial_reader.o(i.TMR_SR_writeTagMemBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = TMR_SR_writeTagMemBytes &rArr; TMR_SR_cmdBlockWrite &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramGet
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_bytesToWords
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGEN2WriteTagData
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdBlockWrite
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProtocol
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_writeTagMemWords
</UL>

<P><STRONG><a name="[f5]"></a>TMR_SR_writeTagMemWords</STRONG> (Thumb, 58 bytes, Stack size 288 bytes, serial_reader.o(i.TMR_SR_writeTagMemWords))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = TMR_SR_writeTagMemWords &rArr; TMR_SR_writeTagMemBytes &rArr; TMR_SR_cmdBlockWrite &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_wordsToBytes
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_writeTagMemBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_executeTagOp
</UL>

<P><STRONG><a name="[fb]"></a>TMR_TRD_init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, tm_reader.o(i.TMR_TRD_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR_TRD_init
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_hasMoreTags
</UL>

<P><STRONG><a name="[122]"></a>TMR_TagOp_init_GEN2_ReadData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tm_reader.o(i.TMR_TagOp_init_GEN2_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR_TagOp_init_GEN2_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[121]"></a>TMR_TagOp_init_GEN2_WriteData</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tm_reader.o(i.TMR_TagOp_init_GEN2_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR_TagOp_init_GEN2_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10d]"></a>TMR__notifyTransportListeners</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, tm_reader.o(i.TMR__notifyTransportListeners))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TMR__notifyTransportListeners
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_receiveMessage
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendBytes
</UL>

<P><STRONG><a name="[123]"></a>TMR_bytesToHex</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hex_bytes.o(i.TMR_bytesToHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR_bytesToHex
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>TMR_bytesToWords</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, tmr_utils.o(i.TMR_bytesToWords))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TMR_bytesToWords
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_writeTagMemBytes
</UL>

<P><STRONG><a name="[115]"></a>TMR_create</STRONG> (Thumb, 340 bytes, Stack size 112 bytes, tm_reader.o(i.TMR_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TMR_create &rArr; TMR_SR_SerialReader_init &rArr; TMR_reader_init_internal &rArr; TMR_RP_init_simple
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_SerialReader_init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_strcpy
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_initSerialTransportTable
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>TMR_fillReaderStats</STRONG> (Thumb, 462 bytes, Stack size 32 bytes, serial_reader_l3.o(i.TMR_fillReaderStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TMR_fillReaderStats
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderStats
</UL>

<P><STRONG><a name="[ff]"></a>TMR_hexDottedQuad</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, hex_bytes.o(i.TMR_hexDottedQuad))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TMR_hexDottedQuad
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[9c]"></a>TMR_paramGet</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tm_reader.o(i.TMR_paramGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR_paramGet &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramProbe
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_writeTagMemBytes
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_readAfterWriteTagMemWords
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_boot
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupReadTagMultipleWithMetadata
</UL>

<P><STRONG><a name="[103]"></a>TMR_paramProbe</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, tm_reader.o(i.TMR_paramProbe))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TMR_paramProbe &rArr; TMR_paramGet &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramGet
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[8d]"></a>TMR_paramSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tm_reader.o(i.TMR_paramSet))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_hasMoreTags
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_SerialReader_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>TMR_reader_init_internal</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, tm_reader.o(i.TMR_reader_init_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TMR_reader_init_internal &rArr; TMR_RP_init_simple
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_RP_init_simple
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_SerialReader_init
</UL>

<P><STRONG><a name="[102]"></a>TMR_stringCopy</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, tmr_utils.o(i.TMR_stringCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TMR_stringCopy &rArr; tm_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSerialNumber
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_initSerialTransportTable
</UL>

<P><STRONG><a name="[10a]"></a>TMR_wordsToBytes</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, tmr_utils.o(i.TMR_wordsToBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TMR_wordsToBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_writeTagMemWords
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_readAfterWriteTagMemWords
</UL>

<P><STRONG><a name="[10]"></a>UART1_Handler</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, serial_transport_tm4c123gh6pm.o(i.UART1_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[11d]"></a>__0sprintf$1</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[137]"></a>__1sprintf$1</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)

<P><STRONG><a name="[110]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_receiveMessage
</UL>

<P><STRONG><a name="[138]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[139]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[13a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[ed]"></a>compareAntennas</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, serial_reader.o(i.compareAntennas))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = compareAntennas
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserProfile
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
</UL>

<P><STRONG><a name="[a0]"></a>compareVersion</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, serial_reader.o(i.compareVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = compareVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_boot
</UL>

<P><STRONG><a name="[107]"></a>extractGen2MemoryBankValues</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, serial_reader_l3.o(i.extractGen2MemoryBankValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = extractGen2MemoryBankValues &rArr; tm_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_parseMetadataOnly
</UL>

<P><STRONG><a name="[112]"></a>isContinuousReadParamSupported</STRONG> (Thumb, 146 bytes, Stack size 12 bytes, serial_reader_l3.o(i.isContinuousReadParamSupported))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = isContinuousReadParamSupported
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendMessage
</UL>

<P><STRONG><a name="[76]"></a>main</STRONG> (Thumb, 532 bytes, Stack size 2824 bytes, read.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 4776<LI>Call Chain = main &rArr; TMR_SR_executeTagOp &rArr; TMR_SR_writeTagMemWords &rArr; TMR_SR_writeTagMemBytes &rArr; TMR_SR_cmdBlockWrite &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramSet
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramGet
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_hasMoreTags
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_getNextTag
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_executeTagOp
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_destroy
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_connect
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_bytesToHex
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_create
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_TagOp_init_GEN2_WriteData
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_TagOp_init_GEN2_ReadData
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_RP_init_simple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[ec]"></a>prepForSearch</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, serial_reader.o(i.prepForSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = prepForSearch &rArr; autoDetectAntennaList &rArr; TMR_SR_cmdSetAntennaSearchList &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAntennaList
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoDetectAntennaList
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserProfile
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
</UL>

<P><STRONG><a name="[b4]"></a>tm_gettime_consistent</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tmr_utils.o(i.tm_gettime_consistent))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tm_gettime_consistent &rArr; tmr_gettime_low &rArr; tmr_gettime
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_gettime_low
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_gettime_high
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGEN2ReadTagData
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
</UL>

<P><STRONG><a name="[ae]"></a>tm_memcpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tmr_utils.o(i.tm_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tm_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_stringCopy
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_receiveMessage
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_parseMetadataOnly
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_parseMetadataFromMessage
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2WriteTagEPC
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_executeEmbeddedRead
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdWriteGen2TagEpc
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserProfile
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetProtocolLicenseKey
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdReadAfterWriteGen2TagEpc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGEN2WriteTagData
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGEN2ReadTagData
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGEN2ReadAfterWriteTagData
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdBlockPermaLock
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_hasMoreTags
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_getNextTag
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractGen2MemoryBankValues
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>

<P><STRONG><a name="[119]"></a>tm_strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tmr_utils.o(i.tm_strcpy))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_create
</UL>

<P><STRONG><a name="[10c]"></a>tm_time_subtract</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tmr_utils.o(i.tm_time_subtract))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
</UL>

<P><STRONG><a name="[106]"></a>tm_u8s_per_bits</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tmr_utils.o(i.tm_u8s_per_bits))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_parseMetadataOnly
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_parseMetadataFromMessage
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterbytes
</UL>

<P><STRONG><a name="[126]"></a>tmr_gettime</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, osdep_tm4c123gh5pm.o(i.tmr_gettime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tmr_gettime
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_gettime_low
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_gettime_high
</UL>

<P><STRONG><a name="[125]"></a>tmr_gettime_high</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, osdep_tm4c123gh5pm.o(i.tmr_gettime_high))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tmr_gettime_high &rArr; tmr_gettime
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_gettime
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_gettime_consistent
</UL>

<P><STRONG><a name="[10b]"></a>tmr_gettime_low</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, osdep_tm4c123gh5pm.o(i.tmr_gettime_low))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tmr_gettime_low &rArr; tmr_gettime
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_gettime
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_gettime_consistent
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
</UL>

<P><STRONG><a name="[105]"></a>validateReadPlan</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, tm_reader.o(i.validateReadPlan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = validateReadPlan &rArr;  validateReadPlan (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateReadPlan
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateReadPlan
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[d6]"></a>verifySearchStatus</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, serial_reader.o(i.verifySearchStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = verifySearchStatus &rArr; TMR_SR_cmdSetReaderConfiguration &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_receiveMessage
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdStopReading
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetReaderConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_connect
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdProbeBaudRate
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[99]"></a>TMR_SR_boot</STRONG> (Thumb, 778 bytes, Stack size 96 bytes, serial_reader.o(i.TMR_SR_boot))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = TMR_SR_boot &rArr; initTxRxMapFromPorts &rArr; TMR_SR_cmdAntennaDetect &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramGet
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetRegion
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetReaderConfiguration
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetProtocol
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetBaudRate
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderConfiguration
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetCurrentProtocol
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetCurrentProgram
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetAvailableProtocols
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdBootFirmware
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compareVersion
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTxRxMapFromPorts
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_connect
</UL>

<P><STRONG><a name="[7b]"></a>TMR_SR_paramGet</STRONG> (Thumb, 2172 bytes, Stack size 328 bytes, serial_reader.o(i.TMR_SR_paramGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = TMR_SR_paramGet &rArr; getSerialNumber &rArr; TMR_SR_cmdGetHardwareVersion &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_stringCopy
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetWriteTxPower
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetUserMode
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetTemperature
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetRegionConfiguration
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetRegion
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderWriteTimeOut
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderStats
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderStatistics
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderConfiguration
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReadTxPowerWithLimits
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReadTxPower
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetQuantizationStep
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetProtocolConfiguration
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetPowerMode
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetMinimumFrequency
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetGPIODirection
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetGPIO
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetFrequencyHopTime
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetFrequencyHopTable
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetAvailableRegions
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetAvailableProtocols
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetAntennaReturnLoss
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdAntennaDetect
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSerialNumber
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPortValues
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_hexDottedQuad
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_reader.o(i.TMR_SR_SerialReader_init)
</UL>
<P><STRONG><a name="[7a]"></a>TMR_SR_paramSet</STRONG> (Thumb, 2056 bytes, Stack size 328 bytes, serial_reader.o(i.TMR_SR_paramSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = TMR_SR_paramSet &rArr; TMR_SR_cmdSetUserProfile &rArr; prepForSearch &rArr; autoDetectAntennaList &rArr; TMR_SR_cmdSetAntennaSearchList &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateReadPlan
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramProbe
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetWriteTxPower
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserProfile
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserMode
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetTxRxPorts
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetRegionLbt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetRegion
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetReaderWriteTimeOut
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetReaderConfiguration
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetReadTxPower
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetQuantizationStep
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetProtocolLicenseKey
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetProtocolConfiguration
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetPowerMode
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetMinimumFrequency
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetGPIODirection
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetFrequencyHopTime
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetFrequencyHopTable
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetBaudRate
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdResetReaderStats
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdResetReaderStatistics
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderWriteTimeOut
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetProtocolConfiguration
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetFrequencyHopTable
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProtocol
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPortValues
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTxRxMapFromPorts
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_reader.o(i.TMR_SR_SerialReader_init)
</UL>
<P><STRONG><a name="[f6]"></a>TMR_SR_readAfterWriteTagMemWords</STRONG> (Thumb, 140 bytes, Stack size 328 bytes, serial_reader.o(i.TMR_SR_readAfterWriteTagMemWords))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = TMR_SR_readAfterWriteTagMemWords &rArr; TMR_SR_cmdGEN2ReadAfterWriteTagData &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_wordsToBytes
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramGet
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGEN2ReadAfterWriteTagData
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProtocol
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_executeTagOp
</UL>

<P><STRONG><a name="[109]"></a>TMR_SR_read_internal</STRONG> (Thumb, 930 bytes, Stack size 352 bytes, serial_reader.o(i.TMR_SR_read_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + In Cycle
<LI>Call Chain = TMR_SR_read_internal &rArr;  TMR_SR_read_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_gettime_low
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_time_subtract
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_gettime_consistent
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_executeEmbeddedRead
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetReaderConfiguration
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdReadTagMultiple
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdMultipleProtocolSearch
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetTagsRemaining
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepForSearch
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compareAntennas
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProtocol
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
</UL>

<P><STRONG><a name="[120]"></a>autoDetectAntennaList</STRONG> (Thumb, 150 bytes, Stack size 152 bytes, serial_reader.o(i.autoDetectAntennaList))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = autoDetectAntennaList &rArr; TMR_SR_cmdSetAntennaSearchList &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetAntennaSearchList
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdAntennaDetect
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepForSearch
</UL>

<P><STRONG><a name="[fe]"></a>getPortValues</STRONG> (Thumb, 132 bytes, Stack size 280 bytes, serial_reader.o(i.getPortValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = getPortValues &rArr; TMR_SR_cmdGetAntennaPortPowersAndSettlingTime &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetAntennaPortPowersAndSettlingTime
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[101]"></a>getSerialNumber</STRONG> (Thumb, 116 bytes, Stack size 288 bytes, serial_reader.o(i.getSerialNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = getSerialNumber &rArr; TMR_SR_cmdGetHardwareVersion &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_stringCopy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetHardwareVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[a4]"></a>initTxRxMapFromPorts</STRONG> (Thumb, 384 bytes, Stack size 128 bytes, serial_reader.o(i.initTxRxMapFromPorts))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = initTxRxMapFromPorts &rArr; TMR_SR_cmdAntennaDetect &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdAntennaDetect
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_boot
</UL>

<P><STRONG><a name="[90]"></a>prepEmbReadTagMultiple</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, serial_reader.o(i.prepEmbReadTagMultiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prepEmbReadTagMultiple &rArr; TMR_SR_msgSetupReadTagMultiple &rArr; TMR_SR_msgSetupReadTagMultipleWithMetadata &rArr; filterbytes
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupReadTagMultiple
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[124]"></a>setAntennaList</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, serial_reader.o(i.setAntennaList))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = setAntennaList &rArr; TMR_SR_cmdSetAntennaSearchList &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetAntennaSearchList
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepForSearch
</UL>

<P><STRONG><a name="[104]"></a>setPortValues</STRONG> (Thumb, 176 bytes, Stack size 288 bytes, serial_reader.o(i.setPortValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = setPortValues &rArr; TMR_SR_cmdSetAntennaPortPowersAndSettlingTime &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetAntennaPortPowersAndSettlingTime
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetAntennaPortPowersAndSettlingTime
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[f4]"></a>setProtocol</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, serial_reader.o(i.setProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = setProtocol &rArr; TMR_SR_cmdSetReaderConfiguration &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetReaderConfiguration
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetProtocol
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_writeTagMemBytes
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_executeTagOp
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_readAfterWriteTagMemWords
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[ad]"></a>filterbytes</STRONG> (Thumb, 480 bytes, Stack size 40 bytes, serial_reader_l3.o(i.filterbytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = filterbytes
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_u8s_per_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2BlockWrite
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2BlockPermaLock
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2BlockErase
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdWriteGen2TagEpc
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdReadAfterWriteGen2TagEpc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdKillTag
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGEN2WriteTagData
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGEN2ReadTagData
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGEN2ReadAfterWriteTagData
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGEN2LockTag
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdBlockWrite
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdBlockPermaLock
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupReadTagSingle
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupReadTagMultipleWithMetadata
</UL>

<P><STRONG><a name="[10f]"></a>tm_crc</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, serial_reader_l3.o(i.tm_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tm_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_receiveMessage
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendMessage
</UL>

<P><STRONG><a name="[118]"></a>TMR_initSerialTransportTable</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, tm_reader.o(i.TMR_initSerialTransportTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TMR_initSerialTransportTable &rArr; TMR_stringCopy &rArr; tm_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_stringCopy
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_create
</UL>

<P><STRONG><a name="[127]"></a>SysTick_Config</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, osdep_tm4c123gh5pm.o(i.SysTick_Config))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_gettime
</UL>

<P><STRONG><a name="[81]"></a>s_flush</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, serial_transport_tm4c123gh6pm.o(i.s_flush))
<BR>[Address Reference Count : 1]<UL><LI> serial_transport_tm4c123gh6pm.o(i.TMR_SR_SerialTransportNativeInit)
</UL>
<P><STRONG><a name="[7c]"></a>s_open</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, serial_transport_tm4c123gh6pm.o(i.s_open))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_SerialTransportNativeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_transport_tm4c123gh6pm.o(i.TMR_SR_SerialTransportNativeInit)
</UL>
<P><STRONG><a name="[7e]"></a>s_receiveBytes</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, serial_transport_tm4c123gh6pm.o(i.s_receiveBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = s_receiveBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_transport_tm4c123gh6pm.o(i.TMR_SR_SerialTransportNativeInit)
</UL>
<P><STRONG><a name="[7d]"></a>s_sendBytes</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, serial_transport_tm4c123gh6pm.o(i.s_sendBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = s_sendBytes &rArr; SendChar &rArr; UART1_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_transport_tm4c123gh6pm.o(i.TMR_SR_SerialTransportNativeInit)
</UL>
<P><STRONG><a name="[7f]"></a>s_setBaudRate</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, serial_transport_tm4c123gh6pm.o(i.s_setBaudRate))
<BR>[Address Reference Count : 1]<UL><LI> serial_transport_tm4c123gh6pm.o(i.TMR_SR_SerialTransportNativeInit)
</UL>
<P><STRONG><a name="[80]"></a>s_shutdown</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, serial_transport_tm4c123gh6pm.o(i.s_shutdown))
<BR>[Address Reference Count : 1]<UL><LI> serial_transport_tm4c123gh6pm.o(i.TMR_SR_SerialTransportNativeInit)
</UL>
<P><STRONG><a name="[11e]"></a>_printf_core</STRONG> (Thumb, 336 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>

<P><STRONG><a name="[83]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf1.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0sprintf$1)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
